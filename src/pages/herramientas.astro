---
import Layout from '../layouts/Layout.astro';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { 
  faSearch,
  faCode,
  faTerminal,
  faPalette,
  faWandMagicSparkles,
  faRobot,
  faTools,
  faCloud,
  faLaptopCode,
  faCodeBranch,
  faKeyboard,
  faPlug,
  faGlobe,
  faDatabase,
  faServer,
  faBug,
  faRocket,
  faGear,
  faDownload,
  faExternalLinkAlt,
  faComment,
  faCamera,
  faIcons,
  faUsers,
  faFilter,
  faTimes
} from '@fortawesome/free-solid-svg-icons';

const categories = [
  { id: 'editors', label: 'Editores de Código', icon: faCode },
  { id: 'extensions', label: 'Extensiones', icon: faPlug },
  { id: 'themes', label: 'Temas', icon: faPalette },
  { id: 'ai', label: 'IA', icon: faRobot },
  { id: 'dev', label: 'Desarrollo', icon: faTools }
];

const tools = [
  {
    name: 'Visual Studio Code',
    description: 'Editor de código gratuito y de código abierto con soporte para múltiples lenguajes y extensiones.',
    category: 'editors',
    url: 'https://code.visualstudio.com',
    icon: faCode,
    tags: ['Editor', 'Microsoft', 'Gratuito']
  },
  {
    name: 'Cursor',
    description: 'Editor de código con IA integrada para mejorar la productividad del desarrollador.',
    category: 'editors',
    url: 'https://cursor.sh',
    icon: faRobot,
    tags: ['Editor', 'IA', 'Productividad']
  },
  {
    name: 'Zed',
    description: 'Editor de código rápido y colaborativo con un enfoque en el rendimiento.',
    category: 'editors',
    url: 'https://zed.dev',
    icon: faRocket,
    tags: ['Editor', 'Colaborativo', 'Rendimiento']
  },
  {
    name: 'IntelliJ IDEA',
    description: 'IDE potente para desarrollo Java con soporte para múltiples frameworks.',
    category: 'editors',
    url: 'https://www.jetbrains.com/idea',
    icon: faLaptopCode,
    tags: ['IDE', 'Java', 'JetBrains']
  },
  {
    name: 'NetBeans',
    description: 'IDE gratuito y de código abierto con soporte para múltiples lenguajes.',
    category: 'editors',
    url: 'https://netbeans.apache.org',
    icon: faCode,
    tags: ['IDE', 'Java', 'Apache']
  },
  {
    name: 'Thunder Client',
    description: 'Cliente REST API ligero y fácil de usar para VS Code.',
    category: 'extensions',
    url: 'https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client',
    icon: faCloud,
    tags: ['API', 'REST', 'Testing']
  },
  {
    name: 'Image Preview',
    description: 'Vista previa de imágenes en VS Code.',
    category: 'extensions',
    url: 'https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview',
    icon: faGlobe,
    tags: ['Imágenes', 'Preview']
  },
  {
    name: 'Path Intellisense',
    description: 'Autocompletado de rutas de archivos en VS Code.',
    category: 'extensions',
    url: 'https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense',
    icon: faCodeBranch,
    tags: ['Productividad', 'Autocompletado']
  },
  {
    name: 'Live Share',
    description: 'Colaboración en tiempo real en VS Code.',
    category: 'extensions',
    url: 'https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare',
    icon: faUsers,
    tags: ['Colaboración', 'Microsoft']
  },
  {
    name: 'GitLens',
    description: 'Supercharge las capacidades de Git en VS Code.',
    category: 'extensions',
    url: 'https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens',
    icon: faCodeBranch,
    tags: ['Git', 'Productividad']
  },
  {
    name: 'Error Lens',
    description: 'Mejora la visualización de errores y advertencias en VS Code.',
    category: 'extensions',
    url: 'https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens',
    icon: faBug,
    tags: ['Debugging', 'Productividad']
  },
  {
    name: 'Auto Close Tag',
    description: 'Cierra automáticamente las etiquetas HTML/XML.',
    category: 'extensions',
    url: 'https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag',
    icon: faCode,
    tags: ['HTML', 'XML', 'Productividad']
  },
  {
    name: 'Better Comments',
    description: 'Mejora los comentarios en el código con categorización por colores.',
    category: 'extensions',
    url: 'https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments',
    icon: faComment,
    tags: ['Comentarios', 'Productividad']
  },
  {
    name: 'Code Snap',
    description: 'Toma capturas de pantalla de tu código con estilo.',
    category: 'extensions',
    url: 'https://marketplace.visualstudio.com/items?itemName=adpyke.codesnap',
    icon: faCamera,
    tags: ['Capturas', 'Compartir']
  },
  {
    name: 'JSON Crack',
    description: 'Visualiza y edita JSON de forma interactiva.',
    category: 'extensions',
    url: 'https://marketplace.visualstudio.com/items?itemName=AykutSarac.jsoncrack-vscode',
    icon: faDatabase,
    tags: ['JSON', 'Visualización']
  },
  {
    name: 'Quokka.js',
    description: 'Playground de JavaScript/TypeScript con evaluación en tiempo real.',
    category: 'extensions',
    url: 'https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode',
    icon: faCode,
    tags: ['JavaScript', 'TypeScript', 'Playground']
  },
  {
    name: 'Tailwind CSS IntelliSense',
    description: 'Autocompletado y linting para Tailwind CSS.',
    category: 'extensions',
    url: 'https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss',
    icon: faWandMagicSparkles,
    tags: ['CSS', 'Tailwind', 'IntelliSense']
  },
  {
    name: 'One Dark Pro',
    description: 'Un tema oscuro elegante y popular para VS Code.',
    category: 'themes',
    url: 'https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme',
    icon: faPalette,
    tags: ['Tema', 'Oscuro']
  },
  {
    name: 'Symbols',
    description: 'Iconos y símbolos para mejorar la visualización del código.',
    category: 'themes',
    url: 'https://marketplace.visualstudio.com/items?itemName=miguelsolorio.symbols',
    icon: faIcons,
    tags: ['Iconos', 'Personalización']
  },
  {
    name: 'Fluent Icons',
    description: 'Iconos de estilo Fluent para VS Code.',
    category: 'themes',
    url: 'https://marketplace.visualstudio.com/items?itemName=miguelsolorio.fluent-icons',
    icon: faIcons,
    tags: ['Iconos', 'Microsoft', 'Fluent']
  },
  {
    name: 'Palenight Theme',
    description: 'Tema oscuro con tonos púrpura y azul.',
    category: 'themes',
    url: 'https://marketplace.visualstudio.com/items?itemName=whizkydee.material-palenight-theme',
    icon: faPalette,
    tags: ['Tema', 'Oscuro']
  },
  {
    name: 'Tokyo Night',
    description: 'Tema inspirado en las luces nocturnas de Tokyo.',
    category: 'themes',
    url: 'https://marketplace.visualstudio.com/items?itemName=enkia.tokyo-night',
    icon: faPalette,
    tags: ['Tema', 'Oscuro']
  },
  {
    name: 'Supermaven',
    description: 'IA para ayudarte a escribir y entender código.',
    category: 'ai',
    url: 'https://marketplace.visualstudio.com/items?itemName=supermaven.supermaven',
    icon: faRobot,
    tags: ['IA', 'Asistente', 'Código']
  },
  {
    name: 'GitHub Copilot',
    description: 'Tu compañero de programación con IA.',
    category: 'ai',
    url: 'https://github.com/features/copilot',
    icon: faRobot,
    tags: ['IA', 'GitHub', 'Asistente']
  },
  {
    name: 'v0',
    description: 'IDE con IA integrada para desarrollo web.',
    category: 'dev',
    url: 'https://v0.dev',
    icon: faCode,
    tags: ['IA', 'Web', 'Desarrollo']
  },
  {
    name: 'Bolt.new',
    description: 'Entorno de desarrollo web instantáneo.',
    category: 'dev',
    url: 'https://bolt.new',
    icon: faRocket,
    tags: ['Web', 'Desarrollo', 'Cloud']
  }
];

// Extraer todos los tags únicos de las herramientas
const allTags = [...new Set(tools.flatMap(tool => tool.tags))].sort();
---

<Layout title="Recursos para Desarrolladores | Sekhard.dev">
  <!-- Hero Section -->
  <section class="bg-gradient-to-br from-primary-600 via-primary-700 to-primary-800 dark:from-primary-800 dark:via-primary-900 dark:to-primary-950">
    <div class="container mx-auto px-4 py-20">
      <div class="max-w-4xl mx-auto text-center">
        <h1 class="text-4xl md:text-5xl font-bold text-white mb-6">
          Recursos y Herramientas para Desarrolladores
        </h1>
        <p class="text-xl text-primary-100 mb-8">
          Una colección curada de las mejores herramientas, extensiones y recursos para mejorar tu flujo de trabajo como desarrollador.
        </p>
        
        <!-- Search Bar -->
        <div class="relative max-w-2xl mx-auto">
          <FontAwesomeIcon
            icon={faSearch}
            className="absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400"
          />
          <input
            type="search"
            id="toolSearch"
            placeholder="Buscar herramientas..."
            class="w-full pl-12 pr-4 py-3 bg-white/10 backdrop-blur-sm border border-white/20 rounded-xl text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-white/30"
          />
        </div>
      </div>
    </div>
    
    <!-- Curved divider -->
    <div class="relative h-16">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320" class="absolute bottom-0 w-full h-full">
        <path
          fill="currentColor"
          class="text-gray-50 dark:text-gray-900"
          fill-opacity="1"
          d="M0,96L48,112C96,128,192,160,288,160C384,160,480,128,576,112C672,96,768,96,864,112C960,128,1056,160,1152,160C1248,160,1344,128,1392,112L1440,96L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z"
        ></path>
      </svg>
    </div>
  </section>

  <!-- Main Content -->
  <section class="bg-gray-50 dark:bg-gray-900 min-h-screen">
    <div class="container mx-auto px-4 py-12">
      <div class="flex flex-col lg:flex-row gap-8">
        <!-- Sidebar Filters -->
        <aside class="lg:w-72 space-y-6">
          <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg sticky top-24">
            <!-- Categories -->
            <div class="mb-8">
              <h3 class="text-lg font-bold mb-4">Categorías</h3>
              <div class="space-y-2">
                {categories.map(category => (
                  <button
                    class="w-full flex items-center gap-3 px-4 py-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors text-left"
                    data-category={category.id}
                  >
                    <FontAwesomeIcon icon={category.icon} className="w-4 h-4 text-primary-600 dark:text-primary-400" />
                    <span>{category.label}</span>
                  </button>
                ))}
              </div>
            </div>

            <!-- Tags Filter -->
            <div>
              <h3 class="text-lg font-bold mb-4">Filtrar por Tags</h3>
              <div class="space-y-2">
                <div class="relative">
                  <FontAwesomeIcon
                    icon={faFilter}
                    className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400"
                  />
                  <input
                    type="search"
                    id="tagSearch"
                    placeholder="Buscar tags..."
                    class="w-full pl-10 pr-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg text-sm"
                  />
                </div>
                <div class="max-h-48 overflow-y-auto space-y-1 mt-2" id="tagsList">
                  {allTags.map(tag => (
                    <label class="flex items-center gap-2 px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded cursor-pointer">
                      <input
                        type="checkbox"
                        value={tag}
                        class="form-checkbox h-4 w-4 text-primary-600 rounded border-gray-300"
                        data-tag={tag}
                      />
                      <span class="text-sm">{tag}</span>
                    </label>
                  ))}
                </div>
              </div>
            </div>

            <!-- Active Filters -->
            <div class="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700" id="activeFilters">
              <h3 class="text-sm font-medium mb-2">Filtros Activos</h3>
              <div class="flex flex-wrap gap-2" id="activeFilterTags"></div>
            </div>
          </div>
        </aside>

        <!-- Tools Grid -->
        <div class="flex-1">
          <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6" id="toolsGrid">
            {tools.map(tool => (
              <article 
                class="bg-white dark:bg-gray-800 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 group"
                data-category={tool.category}
                data-tags={tool.tags.join(',')}
              >
                <a href={tool.url} target="_blank" rel="noopener noreferrer" class="block p-6">
                  <div class="flex items-start justify-between mb-4">
                    <div class="flex items-center gap-4">
                      <div class="w-12 h-12 bg-primary-50 dark:bg-primary-900/50 rounded-xl flex items-center justify-center">
                        <FontAwesomeIcon icon={tool.icon} className="w-6 h-6 text-primary-600 dark:text-primary-400" />
                      </div>
                      <div>
                        <h3 class="text-lg font-bold group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors">
                          {tool.name}
                        </h3>
                        <div class="flex flex-wrap gap-2 mt-2">
                          {tool.tags.map(tag => (
                            <span class="px-2 py-1 bg-primary-50 dark:bg-primary-900/50 text-primary-600 dark:text-primary-400 text-xs rounded-full tag">
                              {tag}
                            </span>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>

                  <p class="text-gray-600 dark:text-gray-400 mb-4">
                    {tool.description}
                  </p>

                  <div class="flex items-center gap-4 mt-auto">
                    <span class="flex items-center gap-2 px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors">
                      <FontAwesomeIcon icon={faDownload} className="w-4 h-4" />
                      Obtener
                    </span>
                    <span class="text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400">
                      <FontAwesomeIcon icon={faExternalLinkAlt} className="w-4 h-4" />
                    </span>
                  </div>
                </a>
              </article>
            ))}
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  // Interfaces
  interface ToolState {
    searchTerm: string;
    activeCategory: string | null;
    activeTags: Set<string>;
  }

  interface ToolElement extends HTMLElement {
    dataset: {
      category: string;
      tags: string;
    };
    classList: DOMTokenList;
  }

  interface FilterButton extends HTMLElement {
    dataset: {
      category: string;
    };
  }

  interface TagCheckbox extends HTMLInputElement {
    dataset: {
      tag: string;
    };
  }

  interface TagLabel extends HTMLElement {
    style: CSSStyleDeclaration;
  }

  // Estado global de filtros
  const state: ToolState = {
    searchTerm: '',
    activeCategory: null,
    activeTags: new Set(),
  };

  // Elementos DOM con tipos seguros
  const searchInput = document.getElementById('toolSearch') as HTMLInputElement;
  const tagSearchInput = document.getElementById('tagSearch') as HTMLInputElement;
  const toolsGrid = document.getElementById('toolsGrid');
  const categoryButtons = document.querySelectorAll<FilterButton>('[data-category]');
  const tagCheckboxes = document.querySelectorAll<TagCheckbox>('input[type="checkbox"][data-tag]');
  const activeFilterTags = document.getElementById('activeFilterTags');
  const tools = toolsGrid ? Array.from(toolsGrid.children) as ToolElement[] : [];

  // Función para actualizar los filtros activos
  function updateActiveFilters() {
    if (!activeFilterTags) return;
    activeFilterTags.innerHTML = '';
    
    if (state.activeCategory) {
      const category = Array.from(categoryButtons).find(btn => btn.dataset.category === state.activeCategory);
      if (category) {
        const categorySpan = category.querySelector('span');
        if (categorySpan) {
          addFilterTag(categorySpan.textContent || '', () => {
            state.activeCategory = null;
            filterTools();
            updateCategoryButtons();
          });
        }
      }
    }

    state.activeTags.forEach(tag => {
      addFilterTag(tag, () => {
        state.activeTags.delete(tag);
        const checkbox = document.querySelector<TagCheckbox>(`[data-tag="${tag}"]`);
        if (checkbox) checkbox.checked = false;
        filterTools();
      });
    });
  }

  // Función para agregar una etiqueta de filtro activo
  function addFilterTag(text: string, onRemove: () => void) {
    if (!activeFilterTags) return;
    
    const tag = document.createElement('span');
    tag.className = 'inline-flex items-center gap-1 px-2 py-1 bg-primary-100 dark:bg-primary-900/50 text-primary-600 dark:text-primary-400 text-sm rounded-full';
    tag.innerHTML = `
      ${text}
      <button class="hover:text-primary-800 dark:hover:text-primary-200">
        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
    
    const button = tag.querySelector('button');
    if (button) button.addEventListener('click', onRemove);
    activeFilterTags.appendChild(tag);
  }

  // Función para actualizar los botones de categoría
  function updateCategoryButtons() {
    categoryButtons.forEach(btn => {
      const isActive = btn.dataset.category === state.activeCategory;
      btn.classList.toggle('bg-primary-50', isActive);
      btn.classList.toggle('dark:bg-primary-900/50', isActive);
      btn.classList.toggle('text-primary-600', isActive);
      btn.classList.toggle('dark:text-primary-400', isActive);
    });
  }

  // Función principal de filtrado
  function filterTools() {
    const searchTerm = state.searchTerm.toLowerCase();
    
    tools.forEach(tool => {
      const titleEl = tool.querySelector('h3');
      const descriptionEl = tool.querySelector('p');
      
      if (!titleEl || !descriptionEl) return;
      
      const toolName = titleEl.textContent?.toLowerCase() || '';
      const toolDescription = descriptionEl.textContent?.toLowerCase() || '';
      const toolCategory = tool.dataset.category;
      const toolTags = tool.dataset.tags.split(',');
      
      const matchesSearch = toolName.includes(searchTerm) || 
                           toolDescription.includes(searchTerm) ||
                           toolTags.some(tag => tag.toLowerCase().includes(searchTerm));
      
      const matchesCategory = !state.activeCategory || toolCategory === state.activeCategory;
      
      const matchesTags = state.activeTags.size === 0 || 
                         toolTags.some(tag => state.activeTags.has(tag));
      
      if (matchesSearch && matchesCategory && matchesTags) {
        tool.classList.remove('hidden');
        if (searchTerm) {
          highlightText(tool, searchTerm);
        } else {
          resetHighlight(tool);
        }
      } else {
        tool.classList.add('hidden');
      }
    });

    updateActiveFilters();
    showNoResultsMessage();
  }

  // Función para mostrar mensaje cuando no hay resultados
  function showNoResultsMessage() {
    const hasVisibleTools = tools.some(tool => !tool.classList.contains('hidden'));
    let noResultsMessage = document.getElementById('noResultsMessage');
    
    if (!hasVisibleTools) {
      if (!noResultsMessage) {
        noResultsMessage = document.createElement('div');
        noResultsMessage.id = 'noResultsMessage';
        noResultsMessage.className = 'col-span-full text-center py-12 text-gray-500 dark:text-gray-400';
        noResultsMessage.innerHTML = `No se encontraron resultados para "${state.searchTerm}"`;
        if (toolsGrid) {
          toolsGrid.appendChild(noResultsMessage);
        }
      }
    } else if (noResultsMessage) {
      noResultsMessage.remove();
    }
  }

  // Función para resaltar texto coincidente
  function highlightText(element: ToolElement, searchTerm: string) {
    const title = element.querySelector('h3');
    const description = element.querySelector('p');
    
    if (!title || !description) return;
    
    if (!title.dataset.original) {
      title.dataset.original = title.textContent || '';
      description.dataset.original = description.textContent || '';
    }
    
    [title, description].forEach(el => {
      const text = el.dataset.original || '';
      const regex = new RegExp(`(${searchTerm})`, 'gi');
      el.innerHTML = text.replace(regex, '<mark class="bg-yellow-200 dark:bg-yellow-900">$1</mark>');
    });
  }

  // Función para resetear el resaltado
  function resetHighlight(element: ToolElement) {
    const title = element.querySelector('h3');
    const description = element.querySelector('p');
    
    if (!title || !description || !title.dataset.original) return;
    
    title.textContent = title.dataset.original || null;
    description.textContent = description.dataset.original || null;
  }

  // Event Listeners con tipos seguros
  if (searchInput) {
    searchInput.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      state.searchTerm = target.value;
      filterTools();
    });
  }

  categoryButtons.forEach(button => {
    button.addEventListener('click', () => {
      const category = button.dataset.category;
      state.activeCategory = state.activeCategory === category ? null : category;
      updateCategoryButtons();
      filterTools();
    });
  });

  tagCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', () => {
      const tag = checkbox.dataset.tag;
      if (checkbox.checked) {
        state.activeTags.add(tag);
      } else {
        state.activeTags.delete(tag);
      }
      filterTools();
    });
  });

  // Búsqueda de tags
  if (tagSearchInput) {
    tagSearchInput.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      const searchTerm = target.value.toLowerCase();
      const tagsList = document.getElementById('tagsList');
      
      if (tagsList) {
        Array.from(tagsList.children).forEach(label => {
          const tagSpan = (label as TagLabel).querySelector('span');
          if (tagSpan) {
            const tagText = tagSpan.textContent?.toLowerCase() || '';
            (label as TagLabel).style.display = tagText.includes(searchTerm) ? '' : 'none';
          }
        });
      }
    });
  }
</script>